import TestFunctions as tf
import MMOPSONumPyV2 as mpso
import BasicSwarmV2 as bpso
import matplotlib.pyplot as plt
import time

def batch01_mmopso():
    FES = 100000
    f = open("test_f_01_d10.txt", "w+")
    print('Testing function 01:')
    results = list()
    for n in range(10):
        print(n)
        pso = mpso.MMOpso(tf.test01_D10, 10, -100, 100)
        for it in range(FES):
            pso.next_iteration()
        results = list()
        results.append(str(pso.best_found_log[int(0.01 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.02 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.03 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.05 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.1 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.2 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.3 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.4 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.5 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.6 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.7 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.8 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.9 * FES)][-1]))
        results.append(str(pso.best_found_log[FES][-1]))
        f.write(' '.join(results))
        f.write('\n')
    f.close()
    f = open("test_f_02_d10.txt", "w+")
    print('Testing function 02:')
    results = list()
    for n in range(10):
        print(n)
        pso = mpso.MMOpso(tf.test02_D10, 10, -100, 100)
        for it in range(FES):
            pso.next_iteration()
        results = list()
        results.append(str(pso.best_found_log[int(0.01 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.02 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.03 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.05 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.1 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.2 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.3 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.4 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.5 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.6 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.7 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.8 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.9 * FES)][-1]))
        results.append(str(pso.best_found_log[FES][-1]))
        f.write(' '.join(results))
        f.write('\n')
    f.close()
    f = open("test_f_03_d10.txt", "w+")
    print('Testing function 03:')
    results = list()
    for n in range(10):
        print(n)
        pso = mpso.MMOpso(tf.test03_D10, 10, -100, 100)
        for it in range(FES):
            pso.next_iteration()
        results = list()
        results.append(str(pso.best_found_log[int(0.01 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.02 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.03 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.05 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.1 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.2 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.3 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.4 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.5 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.6 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.7 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.8 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.9 * FES)][-1]))
        results.append(str(pso.best_found_log[FES][-1]))
        f.write(' '.join(results))
        f.write('\n')
    f.close()
    f = open("test_f_04_d10.txt", "w+")
    print('Testing function 04:')
    results = list()
    for n in range(10):
        print(n)
        pso = mpso.MMOpso(tf.test04_D10, 10, -100, 100)
        for it in range(FES):
            pso.next_iteration()
        results = list()
        results.append(str(pso.best_found_log[int(0.01 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.02 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.03 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.05 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.1 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.2 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.3 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.4 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.5 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.6 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.7 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.8 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.9 * FES)][-1]))
        results.append(str(pso.best_found_log[FES][-1]))
        f.write(' '.join(results))
        f.write('\n')
    f.close()
    f = open("test_f_05_d10.txt", "w+")
    print('Testing function 05:')
    results = list()
    for n in range(10):
        print(n)
        pso = mpso.MMOpso(tf.test04_D10, 10, -100, 100)
        for it in range(FES):
            pso.next_iteration()
        results = list()
        results.append(str(pso.best_found_log[int(0.01 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.02 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.03 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.05 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.1 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.2 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.3 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.4 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.5 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.6 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.7 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.8 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.9 * FES)][-1]))
        results.append(str(pso.best_found_log[FES][-1]))
        f.write(' '.join(results))
        f.write('\n')
    f.close()

def batch01_basicpso():
    FES = 100000
    f = open("test_f_01_d10_basic.txt", "w+")
    print('Testing function 01:')
    results = list()
    for n in range(10):
        print(n)
        pso = bpso.BasicPSO(tf.test01_D10, 10, -100, 100)
        for it in range(FES):
            pso.next_iteration()
        results = list()
        results.append(str(pso.best_found_log[int(0.01 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.02 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.03 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.05 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.1 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.2 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.3 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.4 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.5 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.6 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.7 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.8 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.9 * FES)][-1]))
        results.append(str(pso.best_found_log[FES][-1]))
        f.write(' '.join(results))
        f.write('\n')
    f.close()
    f = open("test_f_02_d10_basic.txt", "w+")
    print('Testing function 02:')
    results = list()
    for n in range(10):
        print(n)
        pso = bpso.BasicPSO(tf.test02_D10, 10, -100, 100)
        for it in range(FES):
            pso.next_iteration()
        results = list()
        results.append(str(pso.best_found_log[int(0.01 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.02 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.03 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.05 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.1 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.2 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.3 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.4 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.5 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.6 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.7 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.8 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.9 * FES)][-1]))
        results.append(str(pso.best_found_log[FES][-1]))
        f.write(' '.join(results))
        f.write('\n')
    f.close()
    f = open("test_f_03_d10_basic.txt", "w+")
    print('Testing function 03:')
    results = list()
    for n in range(10):
        print(n)
        pso = bpso.BasicPSO(tf.test03_D10, 10, -100, 100)
        for it in range(FES):
            pso.next_iteration()
        results = list()
        results.append(str(pso.best_found_log[int(0.01 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.02 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.03 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.05 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.1 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.2 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.3 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.4 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.5 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.6 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.7 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.8 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.9 * FES)][-1]))
        results.append(str(pso.best_found_log[FES][-1]))
        f.write(' '.join(results))
        f.write('\n')
    f.close()
    f = open("test_f_04_d10_basic.txt", "w+")
    print('Testing function 04:')
    results = list()
    for n in range(10):
        print(n)
        pso = bpso.BasicPSO(tf.test04_D10, 10, -100, 100)
        for it in range(FES):
            pso.next_iteration()
        results = list()
        results.append(str(pso.best_found_log[int(0.01 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.02 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.03 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.05 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.1 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.2 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.3 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.4 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.5 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.6 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.7 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.8 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.9 * FES)][-1]))
        results.append(str(pso.best_found_log[FES][-1]))
        f.write(' '.join(results))
        f.write('\n')
    f.close()
    f = open("test_f_05_d10_basic.txt", "w+")
    print('Testing function 05:')
    results = list()
    for n in range(10):
        print(n)
        pso = bpso.BasicPSO(tf.test04_D10, 10, -100, 100)
        for it in range(FES):
            pso.next_iteration()
        results = list()
        results.append(str(pso.best_found_log[int(0.01 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.02 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.03 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.05 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.1 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.2 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.3 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.4 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.5 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.6 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.7 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.8 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.9 * FES)][-1]))
        results.append(str(pso.best_found_log[FES][-1]))
        f.write(' '.join(results))
        f.write('\n')
    f.close()

def batch02_mmopso():
    FES = 100000
    f = open("test_f_01_d30.txt", "w+")
    print('Testing function 01:')
    results = list()
    for n in range(10):
        print(n)
        pso = mpso.MMOpso(tf.test01_D30, 30, -100, 100)
        for it in range(FES):
            pso.next_iteration()
        results = list()
        results.append(str(pso.best_found_log[int(0.01 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.02 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.03 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.05 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.1 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.2 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.3 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.4 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.5 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.6 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.7 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.8 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.9 * FES)][-1]))
        results.append(str(pso.best_found_log[FES][-1]))
        f.write(' '.join(results))
        f.write('\n')
    f.close()
    f = open("test_f_02_d30.txt", "w+")
    print('Testing function 02:')
    results = list()
    for n in range(10):
        print(n)
        pso = mpso.MMOpso(tf.test02_D30, 30, -100, 100)
        for it in range(FES):
            pso.next_iteration()
        results = list()
        results.append(str(pso.best_found_log[int(0.01 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.02 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.03 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.05 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.1 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.2 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.3 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.4 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.5 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.6 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.7 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.8 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.9 * FES)][-1]))
        results.append(str(pso.best_found_log[FES][-1]))
        f.write(' '.join(results))
        f.write('\n')
    f.close()
    f = open("test_f_03_d30.txt", "w+")
    print('Testing function 03:')
    results = list()
    for n in range(10):
        print(n)
        pso = mpso.MMOpso(tf.test03_D30, 30, -100, 100)
        for it in range(FES):
            pso.next_iteration()
        results = list()
        results.append(str(pso.best_found_log[int(0.01 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.02 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.03 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.05 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.1 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.2 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.3 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.4 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.5 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.6 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.7 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.8 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.9 * FES)][-1]))
        results.append(str(pso.best_found_log[FES][-1]))
        f.write(' '.join(results))
        f.write('\n')
    f.close()
    f = open("test_f_04_d30.txt", "w+")
    print('Testing function 04:')
    results = list()
    for n in range(10):
        print(n)
        pso = mpso.MMOpso(tf.test04_D30, 30, -100, 100)
        for it in range(FES):
            pso.next_iteration()
        results = list()
        results.append(str(pso.best_found_log[int(0.01 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.02 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.03 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.05 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.1 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.2 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.3 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.4 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.5 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.6 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.7 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.8 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.9 * FES)][-1]))
        results.append(str(pso.best_found_log[FES][-1]))
        f.write(' '.join(results))
        f.write('\n')
    f.close()
    f = open("test_f_05_d30.txt", "w+")
    print('Testing function 05:')
    results = list()
    for n in range(10):
        print(n)
        pso = mpso.MMOpso(tf.test04_D30, 30, -100, 100)
        for it in range(FES):
            pso.next_iteration()
        results = list()
        results.append(str(pso.best_found_log[int(0.01 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.02 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.03 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.05 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.1 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.2 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.3 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.4 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.5 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.6 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.7 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.8 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.9 * FES)][-1]))
        results.append(str(pso.best_found_log[FES][-1]))
        f.write(' '.join(results))
        f.write('\n')
    f.close()

def batch02_basicpso():
    FES = 100000
    f = open("test_f_01_d30_basic.txt", "w+")
    print('Testing function 01:')
    results = list()
    for n in range(10):
        print(n)
        pso = bpso.BasicPSO(tf.test01_D30, 30, -100, 100)
        for it in range(FES):
            pso.next_iteration()
        results = list()
        results.append(str(pso.best_found_log[int(0.01 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.02 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.03 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.05 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.1 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.2 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.3 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.4 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.5 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.6 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.7 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.8 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.9 * FES)][-1]))
        results.append(str(pso.best_found_log[FES][-1]))
        f.write(' '.join(results))
        f.write('\n')
    f.close()
    f = open("test_f_02_d30_basic.txt", "w+")
    print('Testing function 02:')
    results = list()
    for n in range(10):
        print(n)
        pso = bpso.BasicPSO(tf.test02_D30, 30, -100, 100)
        for it in range(FES):
            pso.next_iteration()
        results = list()
        results.append(str(pso.best_found_log[int(0.01 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.02 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.03 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.05 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.1 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.2 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.3 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.4 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.5 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.6 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.7 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.8 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.9 * FES)][-1]))
        results.append(str(pso.best_found_log[FES][-1]))
        f.write(' '.join(results))
        f.write('\n')
    f.close()
    f = open("test_f_03_d30_basic.txt", "w+")
    print('Testing function 03:')
    results = list()
    for n in range(10):
        print(n)
        pso = bpso.BasicPSO(tf.test03_D30, 30, -100, 100)
        for it in range(FES):
            pso.next_iteration()
        results = list()
        results.append(str(pso.best_found_log[int(0.01 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.02 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.03 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.05 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.1 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.2 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.3 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.4 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.5 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.6 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.7 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.8 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.9 * FES)][-1]))
        results.append(str(pso.best_found_log[FES][-1]))
        f.write(' '.join(results))
        f.write('\n')
    f.close()
    f = open("test_f_04_d30_basic.txt", "w+")
    print('Testing function 04:')
    results = list()
    for n in range(10):
        print(n)
        pso = bpso.BasicPSO(tf.test04_D30, 30, -100, 100)
        for it in range(FES):
            pso.next_iteration()
        results = list()
        results.append(str(pso.best_found_log[int(0.01 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.02 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.03 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.05 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.1 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.2 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.3 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.4 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.5 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.6 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.7 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.8 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.9 * FES)][-1]))
        results.append(str(pso.best_found_log[FES][-1]))
        f.write(' '.join(results))
        f.write('\n')
    f.close()
    f = open("test_f_05_d30_basic.txt", "w+")
    print('Testing function 05:')
    results = list()
    for n in range(10):
        print(n)
        pso = bpso.BasicPSO(tf.test04_D30, 30, -100, 100)
        for it in range(FES):
            pso.next_iteration()
        results = list()
        results.append(str(pso.best_found_log[int(0.01 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.02 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.03 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.05 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.1 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.2 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.3 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.4 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.5 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.6 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.7 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.8 * FES)][-1]))
        results.append(str(pso.best_found_log[int(0.9 * FES)][-1]))
        results.append(str(pso.best_found_log[FES][-1]))
        f.write(' '.join(results))
        f.write('\n')
    f.close()

def time_elapsed():
    start_time = time.time()
    pso = bpso.BasicPSO(tf.test01_D10, 10, -100, 100)
    for i in range(100000):
        pso.next_iteration()
    print('BasicPSO - time elapsed: ', time.time() - start_time)
    start_time = time.time()
    mmopso = mpso.MMOpso(tf.test01_D10, 10, -100, 100)
    for i in range(100000):
        mmopso.next_iteration()
    print('MMOPSO - time elapsed: ', time.time() - start_time)


def graphic_sample_basicpso():
	pso = bpso.BasicPSO(mpso.simple, 2, -10, 10, 20)
	for it in range(100):
		if it > 30:
			pos = pso.particles_current.transpose()
			velo = pso.velocity.transpose()
			for n in range(len(velo[0])):
				plt.plot([pos[0][n], velo[0][n]], [pos[1][n], velo[1][n]], 'r--', linewidth=1, zorder=1)
			plt.scatter(pos[0], pos[1], zorder=2)
			plt.show()
			plt.xlim(-10, 10)
			plt.ylim(-10, 10)
			plt.show()
		#key = input()
		pso.next_iteration()

if __name__ == '__main__':
    #batch01_mmopso()
    #batch01_basicpso()
    #batch02_mmopso()
    #batch02_basicpso()
    #graphic_sample_basicpso()
    time_elapsed()
